#!/usr/bin/env python3
"""
D√©monstration compl√®te d'EdRina Resto
Inclut la cr√©ation d'utilisateurs et tout le workflow
"""

import requests
import json
import time
from datetime import datetime

# Configuration
BASE_URL = "http://localhost:8000"
headers = {"Content-Type": "application/json"}

def print_section(title):
    """Affiche une section de la demo"""
    print(f"\n{'='*60}")
    print(f"üçΩÔ∏è {title}")
    print('='*60)

def print_success(message):
    print(f"‚úÖ {message}")

def print_error(message):
    print(f"‚ùå {message}")

def print_info(message):
    print(f"‚ÑπÔ∏è  {message}")

def login_user(username, password):
    """Connexion utilisateur"""
    login_data = {"username": username, "password": password}
    response = requests.post(f"{BASE_URL}/api/auth/login", json=login_data, headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        token = data["access_token"]
        user = data["user"]
        print_success(f"Connexion r√©ussie - {user['username']} ({user['role']})")
        return token, user
    else:
        print_error(f"√âchec de connexion: {response.text}")
        return None, None

def create_user(token, username, password, role):
    """Cr√©ation d'un utilisateur"""
    auth_headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    
    user_data = {
        "username": username,
        "password": password,
        "role": role
    }
    
    response = requests.post(f"{BASE_URL}/api/auth/register", json=user_data, headers=auth_headers)
    
    if response.status_code == 200:
        print_success(f"Utilisateur {username} cr√©√© avec le r√¥le {role}")
        return True
    else:
        print_error(f"√âchec cr√©ation utilisateur {username}: {response.text}")
        return False

def create_menu_item(token, name, description, price, category):
    """Cr√©ation d'un plat"""
    auth_headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    
    item_data = {
        "name": name,
        "description": description,
        "price": price,
        "category": category,
        "available": True
    }
    
    response = requests.post(f"{BASE_URL}/api/menu", json=item_data, headers=auth_headers)
    
    if response.status_code == 200:
        item_id = response.json()["id"]
        print_success(f"Plat '{name}' ajout√© (ID: {item_id[:8]}...)")
        return item_id
    else:
        print_error(f"√âchec ajout plat '{name}': {response.text}")
        return None

def create_order(token, table_number, items):
    """Cr√©ation d'une commande"""
    auth_headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    
    order_data = {
        "table_number": table_number,
        "items": items,
        "customer_notes": f"Commande table {table_number}"
    }
    
    response = requests.post(f"{BASE_URL}/api/orders", json=order_data, headers=auth_headers)
    
    if response.status_code == 200:
        order_id = response.json()["id"]
        print_success(f"Commande cr√©√©e pour table {table_number} (ID: {order_id[:8]}...)")
        return order_id
    else:
        print_error(f"√âchec cr√©ation commande: {response.text}")
        return None

def update_order_status(token, order_id, status):
    """Mise √† jour du statut d'une commande"""
    auth_headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    
    response = requests.patch(f"{BASE_URL}/api/orders/{order_id}/status", 
                            json={"status": status}, 
                            headers=auth_headers)
    
    if response.status_code == 200:
        print_success(f"Commande marqu√©e '{status}'")
        return True
    else:
        print_error(f"√âchec mise √† jour statut: {response.text}")
        return False

def process_payment(token, order_id, amount):
    """Traitement du paiement"""
    auth_headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    
    payment_data = {
        "amount": amount,
        "method": "cash",
        "currency": "TND"
    }
    
    response = requests.post(f"{BASE_URL}/api/orders/{order_id}/payment", 
                           json=payment_data, 
                           headers=auth_headers)
    
    if response.status_code == 200:
        print_success(f"Paiement de {amount} TND effectu√©")
        return True
    else:
        print_error(f"√âchec paiement: {response.text}")
        return False

def main():
    """D√©monstration compl√®te"""
    print("üçΩÔ∏è EdRina Resto - D√©monstration Compl√®te")
    print(f"üåê URL: {BASE_URL}")
    print(f"üïê Heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Phase 1: Connexion Admin et Setup
    print_section("PHASE 1: CONFIGURATION INITIALE")
    
    admin_token, admin_user = login_user("admin", "admin123")
    if not admin_token:
        print_error("Impossible de continuer sans acc√®s administrateur")
        return
    
    # Phase 2: Cr√©ation des utilisateurs
    print_section("PHASE 2: CR√âATION DES UTILISATEURS")
    
    users_to_create = [
        ("serveur1", "serveur123", "serveur"),
        ("chef1", "chef123", "chef"),
        ("caisse1", "caisse123", "caisse")
    ]
    
    for username, password, role in users_to_create:
        create_user(admin_token, username, password, role)
        time.sleep(0.5)
    
    # Phase 3: Configuration du menu
    print_section("PHASE 3: CONFIGURATION DU MENU")
    
    menu_items = [
        ("Couscous Royal", "Couscous traditionnel avec agneau, poulet et merguez", 25.50, "Plats Principaux"),
        ("Tajine d'Agneau", "Tajine d'agneau aux pruneaux et amandes", 28.00, "Plats Principaux"),
        ("Salade Mechouia", "Salade grill√©e tunisienne traditionnelle", 8.50, "Entr√©es"),
        ("Th√© √† la Menthe", "Th√© traditionnel tunisien", 3.50, "Boissons"),
        ("Makroudh", "P√¢tisserie aux dattes", 6.00, "Desserts")
    ]
    
    created_items = []
    for name, desc, price, category in menu_items:
        item_id = create_menu_item(admin_token, name, desc, price, category)
        if item_id:
            created_items.append({
                "id": item_id,
                "name": name,
                "price": price
            })
        time.sleep(0.5)
    
    if not created_items:
        print_error("Aucun plat cr√©√© - arr√™t de la d√©monstration")
        return
    
    # Phase 4: Simulation workflow serveur
    print_section("PHASE 4: PRISE DE COMMANDE (SERVEUR)")
    
    serveur_token, _ = login_user("serveur1", "serveur123")
    if not serveur_token:
        print_error("Impossible de se connecter comme serveur")
        return
    
    # Cr√©ation d'une commande
    order_items = [
        {
            "menu_item_id": created_items[0]["id"],
            "menu_item_name": created_items[0]["name"],
            "price": created_items[0]["price"],
            "quantity": 2,
            "notes": "Sans piment"
        },
        {
            "menu_item_id": created_items[3]["id"],
            "menu_item_name": created_items[3]["name"],
            "price": created_items[3]["price"],
            "quantity": 3,
            "notes": "Bien sucr√©"
        }
    ]
    
    order_id = create_order(serveur_token, 5, order_items)
    if not order_id:
        print_error("Impossible de cr√©er la commande")
        return
    
    total_amount = sum(item["price"] * item["quantity"] for item in order_items)
    print_info(f"Montant total: {total_amount} TND")
    
    # Phase 5: Workflow cuisine
    print_section("PHASE 5: PR√âPARATION EN CUISINE (CHEF)")
    
    chef_token, _ = login_user("chef1", "chef123")
    if not chef_token:
        print_error("Impossible de se connecter comme chef")
        return
    
    # Simulation du workflow cuisine
    print_info("Commande re√ßue en cuisine...")
    time.sleep(2)
    
    if update_order_status(chef_token, order_id, "in_preparation"):
        print_info("Pr√©paration en cours...")
        time.sleep(3)
        
        if update_order_status(chef_token, order_id, "ready"):
            print_info("Commande pr√™te - notification envoy√©e au serveur")
    
    # Phase 6: Encaissement
    print_section("PHASE 6: ENCAISSEMENT (CAISSE)")
    
    caisse_token, _ = login_user("caisse1", "caisse123")
    if not caisse_token:
        print_error("Impossible de se connecter comme caissier")
        return
    
    # Finaliser la commande
    if update_order_status(caisse_token, order_id, "served"):
        print_info("Commande servie au client")
        
        if process_payment(caisse_token, order_id, total_amount):
            print_info("Transaction termin√©e avec succ√®s !")
    
    # Phase 7: Statistiques
    print_section("PHASE 7: STATISTIQUES (ADMIN)")
    
    auth_headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {admin_token}"
    }
    
    today = datetime.now().strftime("%Y-%m-%d")
    response = requests.get(f"{BASE_URL}/api/statistics/daily?date={today}", headers=auth_headers)
    
    if response.status_code == 200:
        stats = response.json()
        print_success("Statistiques du jour r√©cup√©r√©es:")
        print(f"  üìä Commandes: {stats.get('total_orders', 0)}")
        print(f"  üí∞ Revenus: {stats.get('total_revenue', 0)} TND")
        print(f"  üçΩÔ∏è Tables servies: {stats.get('tables_served', 0)}")
    
    print_section("D√âMONSTRATION TERMIN√âE")
    print("üéâ Toutes les fonctionnalit√©s d'EdRina Resto ont √©t√© test√©es avec succ√®s !")
    print("‚úÖ Syst√®me pr√™t pour la production")
    print("\nüåê Acc√®s √† l'application:")
    print("   Frontend: http://localhost:3000")
    print("   Backend API: http://localhost:8000")
    print("   Documentation: http://localhost:8000/docs")

if __name__ == "__main__":
    main()